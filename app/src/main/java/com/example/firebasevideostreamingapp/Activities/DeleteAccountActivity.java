package com.example.firebasevideostreamingapp.Activities;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.example.firebasevideostreamingapp.Model.Profile;
import com.example.firebasevideostreamingapp.R;
import com.example.firebasevideostreamingapp.databinding.ActivityDeleteAccountBinding;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

public class DeleteAccountActivity extends AppCompatActivity {

    //ViewBing
    private ActivityDeleteAccountBinding binding;

    String profileImg;
    String videoUrl;

    //ProgressDialog to show while deleting user and app data and info
    private ProgressDialog progressDialog;

    //TAG for logs in logcat
    private static final String TAG="DELETE_ACCOUNT_TAG";

    //Firebase Auth for Auth related task
    private FirebaseAuth firebaseAuth;
    private FirebaseUser firebaseUser;

    DatabaseReference reference;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);

        //activity_delete_account.xml=ActivityDeleteAccountBinding
        binding=ActivityDeleteAccountBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot()); //get root of xml file

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });


        //init/setup progressDialog to while deleting account
        progressDialog = new ProgressDialog(this);
        progressDialog.setTitle("Please Wait..");
        progressDialog.setCanceledOnTouchOutside(false);

        //Get Instance of the firebase auth for Auth related task
        firebaseAuth = FirebaseAuth.getInstance();

        //get instance of firebaseUser to get current user and delete
        firebaseUser = firebaseAuth.getCurrentUser();

        //Handle confirmDeleteBtn click, to Delete User Account and App data as well
        binding.confirmDeleteBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                deleteAccount();
            }
        });




        DatabaseReference reference = FirebaseDatabase.getInstance().getReference("VideoUsers");
        DatabaseReference videoReference = FirebaseDatabase.getInstance().getReference("Video");


        reference.child(firebaseUser.getUid()).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                 profileImg = ""+snapshot.child("imageUrl").getValue();

                Log.e("PROFILEIMAGE",profileImg);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        videoReference.orderByChild("uid").equalTo(firebaseUser.getUid()).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                for (DataSnapshot dataSnapshot : snapshot.getChildren()){

                    videoUrl = ""+dataSnapshot.child("videouri").getValue();

                    Log.e("VIDEOURL",videoUrl);
                }
            }
            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

    }


    private void deleteAccount() {
        Log.d(TAG, "deleteAccount: ");

//        getting unique id of FirebaseUser, generated by the Firebase itself
        String myUid = firebaseAuth.getUid();


        Log.e("PROFILEIMAGE",profileImg);

        //show progress
        progressDialog.setMessage("Deleting User Account..");
        progressDialog.show();

        //step:1 Delete User Account
        firebaseUser.delete()
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void unused) {

                        //User Account Deleted
                        Log.d(TAG, "onSuccess: Account Deleted Successfully ");

                        progressDialog.setMessage("Deleting User's Uploaded Video ");







                        StorageReference storageReference = FirebaseStorage.getInstance().getReferenceFromUrl(profileImg);
                        storageReference.delete()
                                .addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {

                                        if (task.isSuccessful()){
                                            Toast.makeText(DeleteAccountActivity.this, "Profile Image Delete From Firebase Storage As Well", Toast.LENGTH_SHORT).show();
                                        }else {
                                            Toast.makeText(DeleteAccountActivity.this, "Failed To Delete Profile Image From Firebase Storage", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                });


                        //we get video url successfully
                        Log.e("VIDEOURL",videoUrl);

                        //Firebase Storage Reference for deleting the video from firebase storage by passing and using video url
                        StorageReference videoStorageReference = FirebaseStorage.getInstance().getReferenceFromUrl(videoUrl);

                        //delete operation
                        videoStorageReference.delete().addOnCompleteListener(new OnCompleteListener<Void>() {
                            @Override
                            public void onComplete(@NonNull Task<Void> task) {

                                //if the task is successful
                                if (task.isSuccessful())
                                    //then show a toast message
                                    Toast.makeText(DeleteAccountActivity.this, "Video Deleted From Firebase Storage As Well", Toast.LENGTH_SHORT).show();
                                else
                                    //or task is not successful, then show error
                                    Toast.makeText(DeleteAccountActivity.this, "Error: "+task.getException(), Toast.LENGTH_SHORT).show();
                            }
                    });





                        //step:2 Remove User Ads, currently we have not worked Ads, Ads will be saved in DB >Ads>AdID. Each Ads contain Uid of owner
                        DatabaseReference refUserAds = FirebaseDatabase.getInstance().getReference("Video");
                        refUserAds.orderByChild("uid").equalTo(myUid)
                                .addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        //their may be multiple Ads by user need to loop
                                        for (DataSnapshot ds : snapshot.getChildren()) {
                                            //delete Ads
                                            ds.getRef().removeValue();
                                            startEmailLoginActivity();
                                        }

                                        progressDialog.setMessage("Deleting User Data..");

                                        //step:2 Remove user data, DB>Users>UserId
                                        DatabaseReference reference = FirebaseDatabase.getInstance().getReference("VideoUsers");
                                        reference.child(myUid)
                                                .removeValue()
                                                .addOnSuccessListener(new OnSuccessListener<Void>() {
                                                    @Override
                                                    public void onSuccess(Void unused) {
                                                        //Account data deleted
                                                        Log.d(TAG, "onSuccess: User data deleted successfully..");

                                                        //calling  startEmailLoginActivity();
                                                        startEmailLoginActivity();

                                                    }
                                                })
                                                .addOnFailureListener(new OnFailureListener() {
                                                    @Override
                                                    public void onFailure(@NonNull Exception e) {
                                                        //Failed to delete user data, may due to firebase DB rules, we have to make it public since we delete data after account deleted
                                                        Log.e(TAG, "onFailure: ", e);
                                                        progressDialog.dismiss();
                                                        Toast.makeText(DeleteAccountActivity.this, "Failed To Delete User Profile", Toast.LENGTH_SHORT).show();


                                                        startEmailLoginActivity();
                                                    }
                                                });
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        //if failed to delete, user data
                                        Toast.makeText(DeleteAccountActivity.this, "Failed To Delete User Data: "+error.getMessage(), Toast.LENGTH_SHORT).show();
                                    }
                                });
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {

                        //failed to delete user account, may be user need re-login for authentication purpose for deleting
                        Log.e(TAG, "onFailure: ", e);

                        //dismissing progressbar
                        progressDialog.dismiss();

                        Toast.makeText(DeleteAccountActivity.this, "Failed To Delete User Profile and Data: "+e.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                });
    }

    //    After deleting User Account data, we launch MainActivity activity
    private void startEmailLoginActivity(){
        Log.d(TAG, "startEmailLoginActivity: ");
        //if user personal data, user app data is deleted successfully, jumped user to EmailLoginActivity
        startActivity(new Intent(DeleteAccountActivity.this, EmailLoginActivity.class));
        //and finish all previous activity
        finishAffinity();
    }

    //    If the user press back button, then we launch MainActivity
//    @Override
//    public void onBackPressed() {
//        super.onBackPressed();
//        startActivity(new Intent(this, HomeActivity.class));
//        finishAffinity();
//    }

}